<?php

require_once 'Customizing/global/plugins/Services/Repository/RepositoryObject/OnlyOffice/vendor/autoload.php';
require_once 'libs/composer/vendor/autoload.php';

use ILIAS\DI\Container;
use srag\Plugins\OnlyOffice\StorageService\StorageService;
use srag\Plugins\OnlyOffice\StorageService\Infrastructure\File\ilDBFileVersionRepository;
use srag\Plugins\OnlyOffice\StorageService\Infrastructure\File\ilDBFileRepository;
use srag\Plugins\OnlyOffice\StorageService\Infrastructure\File\ilDBFileChangeRepository;
use srag\Plugins\OnlyOffice\StorageService\Infrastructure\Common\UUID;
use Matrix\Exception;

/**
 * Class xonoCallbackHandler
 * Handles the callback generated by ONLYOFFICE Docs
 * Called by save.php
 * @author Sophie Pfister <sophie@fluxlabs.ch>
 */
class xonoCallbackHandler
{
    protected Container $dic;
    protected StorageService $storage_service;
    protected string $file_data;
    protected UUID $uuid;
    protected int $file_id;
    protected int $editor_id;
    protected $file_extension;
    protected $changes_object;
    protected string $serverVersion;
    protected string $change_data;
    protected string $change_extension;
    protected string $fileUrl;
    protected string $changeUrl;

    /**
     * @throws Exception if the data cannot be fetched
     */
    public function __construct(
        Container $dic,
        string $uuid,
        int $file_id,
        array $data
    ) {
        $this->dic = $dic;
        $this->uuid = new UUID($uuid);
        $this->file_id = $file_id;

        $this->fileUrl = $data["url"];
        $this->editor_id = $data["users"][0];
        $this->serverVersion = $data["history"]["serverVersion"];
        $this->changeUrl = $data["changesurl"];
        $this->changes_object = json_encode($data["history"]["changes"]);
        $this->file_extension = pathinfo($this->fileUrl, PATHINFO_EXTENSION);
        $this->change_extension = pathinfo($this->changeUrl, PATHINFO_EXTENSION);
        $this->fetchData();
        if (!$this->file_data || !$this->change_data) {
            $this->dic->logger()->root()->error("Data could not be fetched - file data url:".$this->fileUrl." - change data url: ". $this->changeUrl);
            throw new Exception("Data could not be fetched");
        }

        $this->afterConstructor();

    }

    protected function afterConstructor(): void
    {
        $this->storage_service = new StorageService(
            $this->dic,
            new ilDBFileVersionRepository(),
            new ilDBFileRepository(),
            new ilDBFileChangeRepository()
        );
    }

    public function handleCallback() : bool
    {
        try {
            // Upload the new file
            $this->storage_service->updateFileFromUpload($this->file_data, $this->file_id, $this->uuid,
                $this->editor_id,
                $this->file_extension, $this->changes_object, $this->serverVersion, $this->change_data,
                $this->change_extension);
            return true;
        } catch (Exception $e) {
            return false;
        }
    }

    protected function fetchData(): void
    {
        $this->file_data = file_get_contents($this->fileUrl);
        $this->change_data = file_get_contents($this->changeUrl);
    }
}